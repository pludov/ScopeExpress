package fr.pludov.astrometry;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;

import net.ivoa.fits.Fits;
import net.ivoa.fits.FitsException;
import net.ivoa.fits.Header;
import net.ivoa.fits.HeaderCard;
import net.ivoa.fits.data.BinaryTable;
import net.ivoa.fits.hdu.BasicHDU;
import net.ivoa.fits.hdu.BinaryTableHDU;
import net.ivoa.fits.hdu.ImageHDU;
import net.ivoa.util.Cursor;

public class TestFits {
	public static double [] [] datas = 
	{
		{1648.3822,	848.8478,	52324.766,	399.84375},
		{1130.6803,	1101.8354,	3520.3098,	403.8794},
		{893.85406,	1434.8485,	2569.1538,	400.5183},
		{691.99207,	135.82483,	1152.8379,	402.62012},
		{27.282822,	1202.4818,	990.97766,	392.27832},
		{1870.9077,	53.6553,	767.58386,	386.58752},
		{64.9546,	189.42813,	724.2423,	397.31726},
		{1242.7697,	457.80194,	646.8168,	404.32178},
		{1262.9346,	573.9904,	331.3916,	404.80847},
		{353.85776,	630.5395,	273.5154,	404.1091},
		{1582.343,	1295.6522,	249.6835,	397.02957},
		{896.5045,	563.66003,	133.71378,	406.74026},
		{671.91315,	370.2889,	998.9608,	405.16565},
		{355.2828,	117.429665,	659.1753,	399.4088},
		{1704.0103,	33.401268,	596.8373,	389.3777},
		{765.1209,	1107.9869,	430.80008,	404.38156},
		{49.36373,	1331.226,	342.08945,	396.98587},
		{120.72933,	631.7458,	264.10437,	402.1759},
		{1261.9149,	363.0962,	213.35135,	403.1367},
		{1147.6321,	739.9309,	172.43918,	405.88376},
		{553.4135,	946.0746,	110.63333,	404.73392},
		{1877.3763,	1174.2057,	98.468475,	393.52084},
		{1153.293,	1436.3528,	95.370605,	399.52026},
		{1541.331,	725.8897,	83.09296,	401.70956},
		{694.8317,	305.40506,	666.34766,	404.71912},
		{1510.4854,	3.91898,	362.95157,	390.4031},
		{307.17606,	191.52324,	261.6518,	399.83655},
		{1235.9652,	169.69357,	206.03946,	400.53024},
		{1201.7612,	892.6316,	162.00186,	405.06424},
		{833.2257,	1317.0913,	147.91217,	402.23737},
		{364.39194,	1019.2063,	117.266785,	402.82666},
		{1340.1484,	1057.7491,	76.11969,	402.4443},
		{1478.8164,	510.85297,	75.45538,	401.17157},
		{718.762,	652.06647,	69.973724,	406.5021},
		{17.399004,	556.23553,	56.069855,	389.6637},
		{1605.0193,	1252.7872,	39.7742,	397.0743},
		{1908.633,	452.08447,	268.6961,	383.3592},
		{883.25256,	91.28848,	250.98816,	402.61804},
		{140.40758,	388.3111,	170.39581,	400.58685},
		{697.5473,	1310.4254,	141.16351,	401.9666},
		{979.96576,	710.8747,	124.88553,	406.64438},
		{204.86084,	1339.2456,	106.63287,	399.0327},
		{1075.8937,	60.09211,	105.057434,	400.98987},
		{785.04285,	838.0651,	64.07947,	406.36853},
		{1444.8788,	686.9271,	56.30365,	403.008},
		{275.00113,	665.31494,	55.15869,	403.49365},
		{1217.9038,	1012.06036,	39.76056,	404.09912},
		{1625.5483,	982.6033,	35.80838,	399.45663},
		{1646.1608,	353.89417,	169.65399,	395.52557},
		{438.59412,	243.84132,	130.72513,	401.90762},
		{1011.1376,	866.39655,	110.98514,	406.2065},
		{403.33813,	1181.4933,	86.11865,	401.62},
		{932.1192,	590.5445,	55.959473,	406.75443},
		{1538.3324,	918.2521,	55.30838,	401.34943},
		{902.76605,	1180.2891,	48.537445,	403.86203},
		{633.11084,	481.9486,	43.11975,	405.66583},
		{1099.6487,	298.08038,	42.498657,	404.27228},
		{455.8663,	861.6088,	31.44577,	404.5696},
		{968.205,	1023.503,	30.613495,	405.33673},
		{1804.2274,	1033.0662,	24.007568,	396.21304},
		{1351.419,	567.2863,	84.184784,	403.7436},
		{114.909195,	363.07742,	80.62662,	400.12665},
		{1664.2814,	319.01285,	75.90106,	394.61234},
		{310.7497,	1303.843,	62.774048,	399.98044},
		{736.9624,	605.137,	53.60138,	406.54077},
		{1665.8895,	485.71118,	41.997437,	397.09906},
		{543.1871,	221.47273,	36.385864,	402.59885},
		{1223.0958,	232.61224,	33.792236,	401.83182},
		{901.8068,	1337.2051,	29.73642,	402.03964},
		{355.993,	688.1226,	26.560364,	404.19818},
		{1021.4425,	1214.6909,	26.046844,	403.19308},
		{1661.7812,	1381.974,	20.425995,	395.16162},
		{995.86035,	549.1238,	79.87164,	406.5434},
		{108.86009,	414.75183,	61.291687,	400.64426},
		{1663.2749,	173.76682,	60.168518,	392.1804},
		{524.9173,	766.5674,	47.789886,	405.36884},
		{27.296202,	1396.1019,	47.054657,	390.34824},
		{549.7868,	44.422527,	37.849396,	400.37735},
		{1724.9285,	776.5926,	34.986267,	398.38278},
		{1335.1084,	482.52573,	30.001862,	403.33884},
		{161.82187,	652.2575,	27.254852,	402.51947},
		{1011.38654,	1077.0288,	23.155853,	404.73422},
		{637.2264,	1239.6172,	23.893982,	402.41632},
		{1705.3303,	963.5109,	19.979553,	398.2165},
		{1347.3081,	644.4291,	72.73782,	404.12256},
		{328.46024,	1420.2211,	45.50067,	399.2378},
		{815.51227,	914.8695,	34.39395,	406.0705},
		{806.0856,	468.16177,	30.006256,	406.3353},
		{120.226944,	107.386696,	31.848175,	396.62946},
		{1821.4749,	60.23628,	31.095245,	387.63544},
		{1182.7988,	262.03845,	26.581024,	402.85898},
		{1032.8782,	1003.01917,	21.788849,	405.31158},
		{178.07037,	745.80444,	23.457672,	402.72415},
		{841.53265,	1175.6942,	21.718048,	403.8588},
		{1513.9528,	837.033,	16.570984,	402.08972},
		{1660.6383,	1151.5575,	16.420502,	397.20154},
		{1228.2839,	580.938,	38.919678,	405.1843},
		{85.30256,	1010.79913,	41.28665,	401.18616},
		{771.475,	754.4656,	25.585236,	406.56378},
		{1573.4841,	370.89624,	29.179962,	397.29968},
		{640.5928,	353.6755,	26.688416,	404.83795},
		{248.01904,	145.0602,	28.049896,	398.5412},
		{1400.2345,	1021.81726,	21.542694,	402.1477},
		{248.78555,	945.7625,	19.661865,	402.54227},
		{1118.3317,	268.42697,	18.149445,	403.7216},
		{796.9024,	1429.669,	17.592682,	400.95642},
		{1584.5854,	851.2037,	15.798309,	400.9441},
		{1921.5,	1435.5,	15.059479,	375.42648},
		{242.4116,	1098.2462,	41.14261,	401.32605},
		{1020.783,	493.65976,	31.941925,	406.26862},
		{1850.7886,	159.6604,	28.452026,	388.70032},
		{944.3269,	626.6575,	22.241547,	406.7583},
		{451.96216,	154.0456,	20.752869,	400.85486},
		{289.43515,	520.8776,	18.733368,	403.08652},
		{782.97656,	468.25812,	15.511597,	406.28015},
		{1438.9669,	1402.3033,	17.656433,	397.85907},
		{814.89343,	1051.2448,	15.471893,	405.0504},
		{1341.6519,	444.05722,	17.056396,	402.85104},
		{1631.6993,	652.0792,	15.039764,	399.65884},
		{1683.7766,	1293.5352,	14.927246,	395.58972},
		{1245.047,	491.76044,	27.761902,	404.55182},
		{804.9909,	665.5419,	22.220673,	406.73398},
		{1667.1924,	15.622377,	23.85672,	389.37115},
		{766.39233,	383.434,	15.861053,	405.72128},
		{189.75346,	231.44951,	17.869476,	399.10062},
		{222.86995,	867.3649,	17.34439,	402.7562},
		{391.8109,	1191.3041,	17.160614,	401.45126},
		{1322.1561,	1071.7101,	16.779633,	402.49387},
		{1315.7677,	353.2483,	16.240204,	402.16092},
		{558.98376,	1007.78094,	13.4322815,	404.28082},
		{1524.8375,	557.21094,	14.404724,	400.79672},
		{1621.8839,	1393.4471,	14.19754,	395.65506},
		{725.44653,	834.76447,	22.706482,	406.20053},
		{1025.6116,	728.70337,	19.208374,	406.4878},
		{867.4771,	160.50047,	18.017426,	403.55984},
		{1551.4525,	185.41336,	17.20108,	394.60556},
		{372.34155,	653.95654,	16.029816,	404.2978},
		{271.27322,	464.3222,	17.189758,	402.50696},
		{350.29074,	1299.1687,	16.992126,	400.24194},
		{1215.5526,	377.16742,	14.559082,	403.91837},
		{1346.8473,	1177.0833,	15.863281,	401.07156},
		{568.9961,	1075.243,	12.283264,	403.70764},
		{1612.3883,	678.7729,	13.2265625,	400.25452},
		{1906.9038,	1410.6581,	12.318665,	382.97287},
		{831.77405,	822.0984,	21.307007,	406.50296},
		{1161.4431,	486.61505,	19.691895,	405.35266},
		{542.2755,	250.10425,	17.701141,	402.94534},
		{243.79337,	829.7562,	15.827667,	403.05707},
		{298.57132,	255.87628,	15.932465,	400.60126},
		{200.00766,	972.51526,	15.884674,	402.02048},
		{1097.5,	185.5,	15.406067,	402.73297},
		{1514.0701,	411.14536,	15.451202,	399.1719},
		{1193.0029,	1199.0747,	15.163788,	402.316},
		{1574.9352,	534.7695,	12.741638,	399.58438},
		{1374.5369,	718.035,	20.843994,	403.92792},
		{763.08026,	953.36426,	17.20935,	405.7059},
		{825.3119,	173.26878,	16.731598,	403.66333},
		{261.0725,	497.45428,	15.40152,	402.66074},
		{1122.2028,	404.20596,	12.869659,	405.13174},
		{460.39087,	969.47266,	14.054443,	403.92685},
		{35.032333,	229.2505,	15.1354065,	393.23285},
		{1542.4839,	251.45195,	14.981384,	395.96637},
		{1139.088,	1227.344,	14.239258,	402.38037},
		{993.3211,	507.1694,	18.017303,	406.425},
		{727.7432,	960.0006,	16.308685,	405.54108},
		{633.5,	463.5,	13.820343,	405.57144},
		{335.5,	727.5,	13.814972,	404.03024},
		{45.969604,	988.91956,	15.055176,	399.1656},
		{1652.4233,	219.64825,	14.856934,	393.17822},
		{205.22612,	133.89166,	14.764496,	397.90643},
		{1067.4768,	249.42381,	12.316559,	403.93918},
		{1357.5364,	760.55676,	19.95996,	404.10754},
		{605.34393,	560.3053,	15.393829,	405.80353},
		{647.0003,	290.46854,	14.750519,	404.24518},
		{267.69916,	555.2556,	14.716827,	403.06418},
		{9.597964,	1370.12,	15.036926,	382.12552},
		{1922.8019,	22.607698,	14.6597595,	369.45322},
		{1392.6525,	355.72037,	13.952423,	400.79434},
		{38.42793,	326.82208,	14.156006,	395.20987},
		{1312.2278,	934.9983,	18.635956,	403.82913},
		{547.82904,	909.88715,	14.736389,	404.9314},
		{554.62787,	308.1328,	14.06427,	403.74158},
		{125.79039,	1199.1808,	14.977783,	399.85703},
		{181.28833,	716.88275,	14.102173,	402.758},
		{384.98108,	172.37654,	13.859894,	400.41574},
		{1901.5,	125.5,	13.5477295,	381.1972},
		{1239.9059,	521.1705,	17.313812,	404.8026},
		{593.1856,	515.1427,	12.799744,	405.57144},
		{563.6334,	189.67844,	14.375366,	402.34827},
		{44.920464,	739.7463,	14.618134,	399.88065},
		{9.28212,	1443.1061,	13.953339,	379.85812},
		{9.731197,	58.218918,	13.081879,	379.4119},
		{1920.7126,	44.623997,	11.566284,	370.89417},
		{1343.2235,	586.27124,	16.933777,	403.94653},
		{588.1687,	865.36127,	12.814789,	405.4081},
		{1283.618,	640.45856,	16.020355,	404.80356},
		{976.7118,	494.32635,	14.200134,	406.42047},
		{1185.3965,	625.60504,	14.957062,	405.63138},
		{1419.5,	637.5,	15.965515,	403.174},
		{1400.8458,	962.0603,	16.11261,	402.68552},
		{1424.9958,	529.41144,	15.528534,	402.33493},
		{1263.8193,	899.38196,	13.607452,	404.51395},
		{1410.763,	675.1301,	12.638336,	403.4234},
		{1418.6301,	499.4328,	13.29657,	402.14822},
		{1354.4949,	653.3138,	6.678894,	404.07916}
	};
	
	public static void main(String[] args) {
		
		try {
			// Fits fits = new Fits(new File("C:\\MinGW\\msys\\1.0\\home\\utilisateur\\astrometry.net-0.46\\blind\\218634_7.corr"));
			Fits fits = new Fits(new File("C:\\MinGW\\msys\\1.0\\home\\utilisateur\\tests/new-image.fits"));
			fits.read();
			System.out.println("Nr of adu : " + fits.getNumberOfHDUs());
			for(int i = 0; i < fits.getNumberOfHDUs(); ++i)
			{
				System.out.println("hdu " + i);
				BasicHDU hdu = fits.getHDU(i);
				Header header = hdu.getHeader();
				System.out.println("header:" + header);
				if (hdu instanceof ImageHDU) {
					ImageHDU imgHDU = (ImageHDU)hdu;
					System.out.println("image HDU");	
				}
				if (hdu instanceof BinaryTableHDU) {
					BinaryTableHDU bth = (BinaryTableHDU) hdu;
					System.out.println(bth.toString());
					
					int ncols = bth.getNCols();
					int nrows = bth.getNRows();
					for(int r = 0; r < nrows; ++r)
					{
						System.out.print("{");
						for(int c = 0; c < ncols; ++c) {
							if (c != 0) {
								System.out.print(",\t");
							}
							Object o = bth.getElement(r, c);
							if (o instanceof float[]) {
								System.out.print(((float[])o)[0]);
							} else if (o instanceof double[]) {
								System.out.print(((double[])o)[0]);
							} else if (o instanceof int[]) {
								System.out.print(((int[])o)[0]);
							}
						}
						System.out.print("},\n");
					}
				}
				for(Iterator it = header.iterator(); it.hasNext(); )
				{
					HeaderCard card = (HeaderCard) it.next();
					String key = card.getKey();
					String val = card.getValue();
					String comment = card.getComment();
					System.out.println("keys[" + key + "]=" + val + " //" + comment);
				}
				
			}
			
			Fits output = new Fits();
			
			Header header = new Header();
			header.addValue("BITPIX", 8, null);
			header.addValue("NAXIS", 0, null);
			header.addValue("IMAGEW", 1931, "image width");
			header.addValue("IMAGEH", 1451, "image height");
			header.addValue("ANRUN", true, "image height");
			header.addValue("ANAPPL1", 0.18643190057, "arcsec/pixel min");
			header.addValue("ANAPPU1", 335.577421025, "arcsec/pixel max");
			
			header.addValue("ANSOLVED", "./218634_7.solved", "solved output file");
			header.addValue("ANMATCH", "./218634_7.match", "match output file");
			header.addValue("ANCORR", "./218634_7.corr", "Correspondences output filename");
			header.addValue("ANERA", 109.807, "RA center estimate (deg)");
			header.addValue("ANEDEC", 86.9733, "Dec center estimate (deg)");
			header.addValue("ANERAD", 15, "Search radius from estimated posn (deg)");

			
			ImageHDU imageHDU = new ImageHDU(header, null);
			output.addHDU(imageHDU);
			

			float [][]values = new float[datas[0].length][];
			for(int c = 0; c < datas[0].length; ++c) {
				float [] col = new float[datas.length];
				for(int i = 0; i < datas.length; ++i)
				{
					col[i] = (float)datas[i][c];
				}
				values[c] = col;
			}
			
			BinaryTable data = new BinaryTable(values);
			header = new Header(data);

			header.addValue("XTENSION", "BINTABLE", null);
			header.addValue("BITPIX", 8, null);
			header.addValue("NAXIS", 2, null);
			header.addValue("NAXIS1", 16, "width of table in bytes");
			header.addValue("NAXIS2", datas.length, "number of rows in table");
			header.addValue("PCOUNT", 0, "size of special data area");
			header.addValue("GCOUNT", 1, "one data group (required keyword)");
			header.addValue("TFIELDS", 4 , "number of fields in each row");
			header.addValue("TTYPE1", "X" , " X coordinate");
			header.addValue("TFORM1", "E" , " data format of field: 4-byte REAL");
			header.addValue("TUNIT1", "pix" , " physical unit of field");
			header.addValue("TTYPE2", "Y" , " Y coordinate");
			header.addValue("TFORM2", "E" , " data format of field: 4-byte REAL");
			header.addValue("TUNIT2", "pix" , " physical unit of field");
			header.addValue("TTYPE3", "FLUX" , " Flux of source");
			header.addValue("TFORM3", "E" , " data format of field: 4-byte REAL");
			header.addValue("TUNIT3", "unknown" , " physical unit of field");
			header.addValue("TTYPE4", "BACKGROUND" , " Sky background of source");
			header.addValue("TFORM4", "E" , " data format of field: 4-byte REAL");
			header.addValue("TUNIT4", "unknown" , " physical unit of field");
			header.addValue("EXTNAME", "SOURCES" , " name of this binary table extension");
			
			header.addValue("IMAGEW", 1931, "image width");
			header.addValue("IMAGEH", 1451, "image height");
			BinaryTableHDU bth = new BinaryTableHDU(header, data);
			output.addHDU(bth);

			FileOutputStream fos = null;
			try
			{
				fos = new FileOutputStream(new File("C:\\MinGW\\msys\\1.0\\home\\utilisateur\\astrometry.net-0.46\\blind\\218634_7_new.fit"));
				DataOutputStream dos = new DataOutputStream(fos);
				output.write(dos);
			} finally {
				if (fos != null) {
					fos.close();
				}
			}
		} catch (FitsException e) {
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
}
